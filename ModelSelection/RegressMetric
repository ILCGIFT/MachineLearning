#R² score, the coefficient of determination
from sklearn.metrics import r2_score
y_true = [3, -0.5, 2, 7]
y_pred = [2.5, 0.0, 2, 8]
r2_score(y_true, y_pred)
y_true = [[0.5, 1], [-1, 1], [7, -6]]
y_pred = [[0, 2], [-1, 2], [8, -5]]
r2_score(y_true, y_pred, multioutput='variance_weighted')
y_true = [[0.5, 1], [-1, 1], [7, -6]]
y_pred = [[0, 2], [-1, 2], [8, -5]]
r2_score(y_true, y_pred, multioutput='uniform_average')
r2_score(y_true, y_pred, multioutput='raw_values')
r2_score(y_true, y_pred, multioutput=[0.3, 0.7])
y_true = [-2, -2, -2]
y_pred = [-2, -2, -2]
r2_score(y_true, y_pred)
r2_score(y_true, y_pred, force_finite=False)
y_true = [-2, -2, -2]
y_pred = [-2, -2, -2 + 1e-8]
r2_score(y_true, y_pred)
r2_score(y_true, y_pred, force_finite=False)

#Mean absolute error
from sklearn.metrics import mean_absolute_error
y_true = [3, -0.5, 2, 7]
y_pred = [2.5, 0.0, 2, 8]
mean_absolute_error(y_true, y_pred)
y_true = [[0.5, 1], [-1, 1], [7, -6]]
y_pred = [[0, 2], [-1, 2], [8, -5]]
mean_absolute_error(y_true, y_pred)
mean_absolute_error(y_true, y_pred, multioutput='raw_values')
mean_absolute_error(y_true, y_pred, multioutput=[0.3, 0.7])

#Pinball loss
from sklearn.metrics import mean_pinball_loss
y_true = [1, 2, 3]
mean_pinball_loss(y_true, [0, 2, 3], alpha=0.1)
mean_pinball_loss(y_true, [1, 2, 4], alpha=0.1)
mean_pinball_loss(y_true, [0, 2, 3], alpha=0.9)
mean_pinball_loss(y_true, [1, 2, 4], alpha=0.9)
mean_pinball_loss(y_true, y_true, alpha=0.1)
mean_pinball_loss(y_true, y_true, alpha=0.9)
#D² absolute error score
from sklearn.metrics import d2_absolute_error_score
y_true = [3, -0.5, 2, 7]
y_pred = [2.5, 0.0, 2, 8]
d2_absolute_error_score(y_true, y_pred)
y_true = [1, 2, 3]
y_pred = [1, 2, 3]
d2_absolute_error_score(y_true, y_pred)
y_true = [1, 2, 3]
y_pred = [2, 2, 2]
d2_absolute_error_score(y_true, y_pred)

#Dummy estimators
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
X, y = load_iris(return_X_y=True)
y[y != 1] = -1
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)

from sklearn.dummy import DummyClassifier
from sklearn.svm import SVC
clf = SVC(kernel='linear', C=1).fit(X_train, y_train)
clf.score(X_test, y_test)
clf = DummyClassifier(strategy='most_frequent', random_state=0)
clf.fit(X_train, y_train)
clf.score(X_test, y_test)
